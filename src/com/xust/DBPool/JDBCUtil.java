package com.xust.DBPool;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class JDBCUtil {

	private final static String className = "com.mysql.jdbc.Driver";
	private final static String url = "jdbc:mysql://localhost:3305/healthyroom?user=root&password=root";
	static {
		try {
			Class.forName(className);
		} catch(ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	public static Connection getConnection() {
		Connection conn = null;
		try {
			conn = DriverManager.getConnection(url);
		} catch(SQLException e) {
			e.printStackTrace();
		}
		return conn;
	}
	
	public static void closedConn(Connection conn) {
		try {
			if(conn != null) {
				conn.close();
			}
		} catch(SQLException e) {
			e.printStackTrace();
		}
	}
	
	public static Statement createStatement(Connection conn) {
		
		Statement stmt = null;
		try {
			stmt = conn.createStatement();
		} catch(SQLException e) {
			System.out.println("在JDBCUtil中静态创建Statement对象时，出现异常！");
			e.printStackTrace();
		}
		
		return stmt;
	}
	
	
	public static void closedStmt(Statement stmt) {
		try {
			if(stmt != null) {
				stmt.close();
				stmt = null;
			}
		} catch(SQLException e) {
			e.printStackTrace();
		}
	}
	
	public static ResultSet executeQuery(Statement stmt, String sql) {
		
		ResultSet rs = null;
		try {
			rs = stmt.executeQuery(sql);
		} catch(SQLException e) {
			System.out.println("在JDBCUtil中静态创建ResultSet对象时，出现异常！");
			e.printStackTrace();
		}
		
		return rs;
	}
	
	public static void closedRs(ResultSet rs) {
		try {
			if(rs != null) {
				rs.close();
				rs = null;
			}
		} catch(SQLException e) {
			e.printStackTrace();
		}
	}

	public static PreparedStatement preparedStatement(Connection conn, String sql) {
		PreparedStatement pstmt = null;
		
		try {
			pstmt = conn.prepareStatement(sql);
		} catch(SQLException e) {
			System.out.println("在JDBCUtil中静态创建PreparedStatement对象时，出现异常！");
			e.printStackTrace();
		}
		
		return pstmt;
	}
	
	public static void closedPstmt(PreparedStatement pstmt) {
		try {
			if(pstmt != null) {
				pstmt.close();
				pstmt = null;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public static PreparedStatement preparedStatement(Connection conn, String sql, int autoGeneratedKeys) {
		
		PreparedStatement pstmt = null;
		
		try {
			pstmt = conn.prepareStatement(sql, autoGeneratedKeys);
		} catch(SQLException e) {
			System.out.println("在JDBCUtil中静态创建PreparedStatement含有刚插入值的对象时，出现异常！");
			e.printStackTrace();
		}
		return pstmt;
	}
	
}